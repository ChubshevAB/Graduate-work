name: Test, Build and Deploy

on:
  push:
    branches: [ main, master ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports: [5432:5432]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install flake8

    - name: Run flake8 linting
      run: |
        flake8 . --count --max-line-length=127 --statistics --exclude=migrations

    - name: Run basic tests
      env:
        DEBUG: "True"
        SECRET_KEY: "test-secret-key-${{ github.run_id }}"
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_HOST: localhost
        DB_PORT: 5432
        ALLOWED_HOSTS: "localhost,127.0.0.1"
        TELEGRAM_BOT_TOKEN: "test:token"
      run: |
        python manage.py test habits.tests.HabitModelTest --noinput -v=1
        python manage.py test habits.tests.HabitValidatorTest --noinput -v=1
        python manage.py test users.tests.UserModelTest --noinput -v=1

  docker-build:
    runs-on: ubuntu-latest
    needs: test-and-lint
    if: success() && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t habits-tracker .

    - name: Test Docker image
      run: |
        docker run --rm habits-tracker python -c "import django; print('Django available')"

  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-lint, docker-build]
    if: success() && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH with passphrase
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        eval "$(ssh-agent -s)"
        echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: 22
        timeout: 60s
        script: |
          set -e
          echo "🚀 Starting deployment..."
          cd /opt/habits-tracker
          
          # Останавливаем текущие контейнеры
          docker compose down
          
          # Pull последних изменений
          git pull origin main
          
          # Создаем/обновляем .env файл
          cat > .env << EOL
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          DEBUG=False
          ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,${{ secrets.SERVER_HOST }}
          POSTGRES_DB=habits_db
          POSTGRES_USER=habits_user
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          EOL
          
          # Перезапускаем контейнеры
          docker compose up -d --build
          
          # Ждем готовности базы данных
          sleep 15
          
          # Выполняем миграции
          docker compose exec -T web python manage.py migrate --noinput
          
          # Собираем статические файлы
          docker compose exec -T web python manage.py collectstatic --noinput
          
          echo "✅ Deployment completed successfully!"
