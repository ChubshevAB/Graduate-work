name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_IMAGE_NAME: medical-lab-app

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_medical_lab
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        SECRET_KEY=test-secret-key-for-ci-cd-pipeline-2024
        DEBUG=True
        DB_NAME=test_medical_lab
        DB_USER=test_user
        DB_PASSWORD=test_password
        DB_HOST=localhost
        DB_PORT=5432
        EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
        ALLOWED_HOSTS=localhost,127.0.0.1,testserver
        DEFAULT_FROM_EMAIL=test@example.com
        EOF

    - name: Run migrations
      run: |
        export $(cat .env.test | xargs)
        python manage.py migrate

    - name: Run tests
      run: |
        export $(cat .env.test | xargs)
        python manage.py test medical_lab --verbosity=2

    - name: Run security check
      run: |
        pip install bandit
        bandit -r medical_lab/ -f html -o security_report.html || true

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t $DOCKER_IMAGE_NAME:latest .

    - name: Test Docker image
      run: |
        docker run --rm $DOCKER_IMAGE_NAME:latest python manage.py check --deploy

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Создаем директорию приложения если не существует
          mkdir -p /home/${{ secrets.SERVER_USER }}/medical-lab
          cd /home/${{ secrets.SERVER_USER }}/medical-lab
          
          # Копируем файлы
          git clone https://github.com/${{ github.repository }} . || git pull origin main
          
          # Копируем .env файл если существует
          if [ -f /home/${{ secrets.SERVER_USER }}/.env.medical-lab ]; then
            cp /home/${{ secrets.SERVER_USER }}/.env.medical-lab .env
          fi
          
          # Останавливаем и перезапускаем контейнеры
          docker-compose down
          docker-compose up -d --build
          
          # Ждем запуска контейнеров
          sleep 30
          
          # Выполняем миграции
          docker-compose exec -T web python manage.py migrate --noinput
          
          # Собираем статические файлы
          docker-compose exec -T web python manage.py collectstatic --noinput
          
          # Проверяем здоровье приложения
          curl -f http://localhost/health/ || exit 1
          
          echo "✅ Деплой завершен успешно!"
          echo "🚀 Приложение доступно по адресу: http://${{ secrets.SERVER_HOST }}"

    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: Деплой медицинской лаборатории завершен
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always() && github.ref == 'refs/heads/main'
