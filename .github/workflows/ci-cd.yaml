name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_IMAGE_NAME: medical-lab-app

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_medical_lab
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        SECRET_KEY=test-secret-key-for-ci-cd-pipeline-2024
        DEBUG=True
        DB_NAME=test_medical_lab
        DB_USER=test_user
        DB_PASSWORD=test_password
        DB_HOST=localhost
        DB_PORT=5432
        EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
        ALLOWED_HOSTS=localhost,127.0.0.1,testserver
        DEFAULT_FROM_EMAIL=test@example.com
        EOF

    - name: Run migrations
      run: |
        export $(cat .env.test | xargs)
        python manage.py migrate

    - name: Run tests
      run: |
        export $(cat .env.test | xargs)
        python manage.py test medical_lab --verbosity=2

    - name: Run security check
      run: |
        pip install bandit
        bandit -r medical_lab/ -f html -o security_report.html || true

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t $DOCKER_IMAGE_NAME:latest .

    - name: Test Docker image
      run: |
        docker run --rm $DOCKER_IMAGE_NAME:latest python manage.py check --deploy

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        timeout: 30s
        script: |
          set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          echo "üìÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞..."
          mkdir -p /home/test-user/medical-lab
          cd /home/test-user/medical-lab

          echo "üì• –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥..."
          if [ -d ".git" ]; then
            git pull origin main
          else
            git clone https://github.com/ChubshevAB/Graduate-work.git .
          fi

          echo "üîß –ö–æ–ø–∏—Ä—É–µ–º .env —Ñ–∞–π–ª..."
          if [ -f /home/test-user/.env.medical-lab ]; then
            cp /home/test-user/.env.medical-lab .env
          fi

          echo "üê≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
          docker-compose down 2>/dev/null || true

          echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
          docker-compose up -d --build

          echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞..."
          sleep 30

          echo "üóÑÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
          docker-compose exec -T web python manage.py migrate --noinput

          echo "üì¶ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã..."
          docker-compose exec -T web python manage.py collectstatic --noinput

          echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
          echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://158.160.12.110"

    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: –î–µ–ø–ª–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always() && github.ref == 'refs/heads/main'
